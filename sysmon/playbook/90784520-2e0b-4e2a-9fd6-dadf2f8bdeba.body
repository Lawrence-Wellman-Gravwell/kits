#Overview
Welcome to the Gravwell Windows Sysmon kit.  This kit provides Sysmon specific resources that will enable practitioners to rapidly extract value from Sysmon data.  The kit provides overview dashboards, investigative dashboards, a large query library, and some resources to help make sense of some esoteric Sysmon fields.

Sysmon can provide excellent insights into Windows systems and even provide some basic anomaly detection.  Security practitioners would be advised to use Sysmon to monitor for unsigned application usage, unusual DNS activity, or network connections that originate from non-standard application pathways.  The Gravwell Sysmon Kit can help cover the basics and get you started in becoming a Sysmon ninja.

This playbook will help you get started with Gravwell and Sysmon.  We provide a good overview of Sysmon capabilities and provide a plethora of queries and operations.  However, if you are ready to dive deep into the nitty gritty of what Sysmon can do we highly recommend the [Sysmon Community Guide](https://github.com/trustedsec/SysmonCommunityGuide) by TrustedSec.  We will also go over the basics of a Sysmon event and then dive a little deeper into some of the functionality for each Sysmon category.  This kit will deep dive into the following categories:

- Process Events
- DNS Events
- File Activity Events
- Registry Events
- ConfigurationEvents

This kit also provides a couple of great overview and investigative dashboards using Sysmon data:

- [Sysmon DNS Overview](/#/dashboards/5ac40515-573f-42b7-94ca-05fdb9fdeead)
- [Sysmon Process Overview](/#/dashboards/50b06309-c8c3-46b0-af80-6ddd496b0a73)
- [Sysmon Registry Overview](/#/dashboards/69049b3c-b83d-4cae-9071-9b24a1f0baba)
- [Sysmon Network Overview](/#/dashboards/2e916960-c531-4577-8d85-68ba5cca6c81)
- [Sysmon DNS Domain Investigation](/#/dashboards/d0905e72-ecad-49c3-9f7b-23560608258f)
- [Sysmon Process GUID Investigation](/#/dashboards/90918c39-5748-48ab-a0db-91a6534e0911)
- [Sysmon Process Name Investigator](/#/dashboards/ae15b1b7-8cb7-48d4-84e9-b850754346c9)

## Sysmon Configuration

Sysmon supports a robust configuration system designed to minimize superfluous events and help focus on the events that matter.  There are a ton of pretty good configurations available, but we recommend these two:

- [https://github.com/olafhartong/sysmon-modular](https://github.com/olafhartong/sysmon-modular)
- [https://github.com/SwiftOnSecurity/sysmon-config](https://github.com/SwiftOnSecurity/sysmon-config)

WARNING: If an attacker knows you are using Sysmon and has access to your configuration it can be trivial to avoid detection.  However, SwiftOnSecurity puts it rather well:

Sysmon is not hardened against an attacker with admin rights. Additionally, this configuration offers an attacker, willing to study it, limited ways to evade some of the logging. If you are in a very high-threat environment, you should consider a broader, log-most approach. However, in the vast majority of cases, an attacker will bumble through multiple behavioral traps which this configuration monitors, especially in the first minutes.

This kit provides a configuration macro named *$SYSMON* which must be configured to point at the tag containing your Sysmon data, when you installed this kit it asked if you wanted to change it.  By default it points at the tag *sysmon*, but you can change it later by navigating to your macros and adjusting the value in the macro.  If you have your Sysmon data spread across multiple tags, just include all the tags as a comma delimited list (no spaces) in the macro.

Sysmon data comes in through the Gravwell [winevent](https://docs.gravwell.io/#!ingesters/ingesters.md#Windows_Event_Service) ingester, the winevent ingester is designed to consume events from the Windows Event subsystem and can be installed on individual endpoints or on a [Windows Event Collector](https://docs.microsoft.com/en-us/windows/win32/wec/windows-event-collector) to consume events from many Windows machines.  The Gravwell winevent ingester must be configured to consume from the Sysmon event channel.  Here is an example **EventChannel** configuration block that will do just that:

<pre>
[EventChannel "sysmon"]
    Tag-Name=sysmon
    Channel="Microsoft-Windows-Sysmon/Operational"
    Max-Reachback=24h  #reachback must be expressed in hours (h), minutes (m), or seconds(s)
</pre>

## Basic Sysmon Query Syntax

Sysmon data is delivered to Gravwell using the [Gravwell Event Ingester](https://docs.gravwell.io/#!ingesters/ingesters.md#Windows_Event_Service).  For more information about the ingester and Windows logging basics, check out our [Windows Event Logging](https://www.gravwell.io/blog/gravwell-and-windows-event-logging) post.

Windows logs are best handled using the [winlog](https://docs.gravwell.io/#!search/winlog/winlog.md) search module.  This module is adept at rapidly extracting and filtering the complex Windows XML log format.  Windows XML logs contain three core sections: *System*, *Data*, and *Binary*.  Sysmon events rarely provide *Binary* data, so we will be mostly concerned with the *System* and *Data* sections.

### System Section
The *System* section provides some basic category data which you can use to drill into a specific types of events.  The most important fields in the *System* section are *Channel*, *Provider*, *Computer*, and *EventID*.  The *Channel* and *Provider* fields tell you which subsystem a specific event came from.  Sysmon data always has a *Provider* of **Microsoft-Windows-Sysmon** and a *Channel* of **Microsoft-Windows-Sysmon/Operational**.  This means that pretty much all Gravwell queries that are looking for Sysmon data should add those filters, for example:

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" Channel=="Microsoft-Windows-Sysmon/Operational"
```

The *Computer* field identifies which machine generated the event and the *EventID* identifies the type of event.  For example, if we only wanted to see Sysmon DNS events from the *Computer* named "foobar" the query would be:

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" Channel=="Microsoft-Windows-Sysmon/Operational" Computer=="foobar" EventID==22
```

Here is an example *System* section from a Sysmon event:

<pre lang="xml" ><xmp>
<System>
  <Provider Name='Microsoft-Windows-Sysmon' Guid='{5770385f-c22a-43e0-bf4c-06f5698ffbd9}'/>
  <EventID>16</EventID>
  <Version>3</Version>
  <Level>4</Level>
  <Task>16</Task>
  <Opcode>0</Opcode>
  <Keywords>0x8000000000000000</Keywords>
  <TimeCreated SystemTime='2021-01-24T04:05:00.430231100Z'/>
  <EventRecordID>16934383</EventRecordID>
  <Correlation/>
  <Execution ProcessID='5312' ThreadID='5468'/>
  <Channel>Microsoft-Windows-Sysmon/Operational</Channel>
  <Computer>Workstation1</Computer>
  <Security UserID='S-1-5-21-2048713118-791522199-356788912-1001'/>
</System>
</xmp></pre>

### Data Section
Each Sysmon event type provides fields specific to the type of event, for example a DNS event might provide the DNS name queried and a response for the name.  File activity events would provide a program performing the activity and the target file being operated on.  All of these custom event fields are located in the *Data* section.  *Data* section elements are accessed using the XML field names associated.


Here is an example *Data* section from a Sysmon DNS Event (EventID 22):

<pre lang="xml" ><xmp>
<EventData>
  <Data Name='RuleName'>-</Data>
  <Data Name='UtcTime'>2021-01-29 18:33:49.521</Data>
  <Data Name='ProcessGuid'>{e8a27be9-aee3-6013-4801-000000006b00}</Data>
  <Data Name='ProcessId'>15284</Data>
  <Data Name='QueryName'>ec.razer.com</Data>
  <Data Name='QueryStatus'>0</Data>
  <Data Name='QueryResults'>type: 5 ::ffff:52.3.57.252;::ffff:3.220.82.20;</Data>
  <Data Name='Image'>C:\Program Files (x86)\Razer\Synapse\RzSynapse.exe</Data>
</EventData>
</xmp></pre>

## Sysmon EventIDs

<table>
<tr><th>EventID</th><th>Description and Example Query</th><th>Additional Information</th></tr>
<tr><td>1</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D1%20User%20Computer%20Product%20Description%20OriginalFileName%20Version%20CurrentDirectory%20ParentImage%20%7C%20table%20TIMESTAMP%20User%20Computer%20Product%20Description%20OriginalFileName%20Version%20CurrentDirectory%20ParentImage&duration=PT1H">Process Created</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90001">LINK</a></td></tr>
<tr><td>2</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D2%20Computer%20Image%20TargetFilename%20PreviousCreationUtcTime%20%7C%20table%20TIMESTAMP%20Computer%20Image%20TargetFilename%20PreviousCreationUtcTime&duration=PT1H">Process Changed File Creation Time</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90002">LINK</a></td></tr>
<tr><td>3</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D3%20Computer%20User%20Image%20Protocol%20Initiated%20SourceIp%20SourcePort%20DestinationIp%20DestinationPort%20%7C%20table%20TIMESTAMP%20Computer%20User%20Image%20Protocol%20Initiated%20SourceIp%20SourcePort%20DestinationIp%20DestinationPort&duration=PT1H">Network Connection</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90003">LINK</a></td></tr>
<tr><td>4</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D4%20Computer%20State%20Version%20SchemaVersion%20%7C%20table%20TIMESTAMP%20Computer%20State%20Version%20SchemaVersion&duration=PT1H">Sysmon Service State Changed</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90004">LINK</a></td></tr>
<tr><td>5</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D5%20Computer%20Image%20%7C%20table%20TIMESTAMP%20Computer%20Image
&duration=PT1H">Process Terminated</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90005">LINK</a></td></tr>
<tr><td>6</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D6%20Computer%20ImageLoaded%20Signed%20Signature%20SignatureStatus%20%7C%20table%20TIMESTAMP%20Computer%20ImageLoaded%20Signed%20Signature%20SignatureStatus&duration=PT1H">Driver Loaded</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90006">LINK</a></td></tr>
<tr><td>7</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D7%20Computer%20Image%20ImageLoaded%20Product%20FileVersion%20Company%20Signed%20Signature%20SignatureStatus%20Description%20%7C%20table%20TIMESTAMP%20Computer%20Image%20ImageLoaded%20Product%20FileVersion%20Company%20Signed%20Signature%20SignatureStatus&duration=PT1H">Image Loaded</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90007">LINK</a></td></tr>
<tr><td>8</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D8%20SourceImage%20TargetImage%20StartModule%20StartFunction%20%7C%20table%20TIMESTAMP%20SourceImage%20TargetImage%20StartModule%20StartFunction&duration=PT1H">Create Remote Thread in Process</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90008">LINK</a></td></tr>
<tr><td>9</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D9%20Computer%20Image%20Device%20%7C%20table%20TIMESTAMP%20Computer%20Image%20Device&duration=PT1H">File Raw Access Read Activity</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90009">LINK</a></td></tr>
<tr><td>10</td><td><a href="/#/search/launch?query=tag%3Dsysmon%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20EventID%3D%3D10%20Computer%20SourceImage%21%7Esystem32%20TargetImage%7Esystem32%20GrantedAccess%20%7C%0Aanko%20sysmon_grantaccess_flags%20GrantedAccess%20dump%20Flags%20%7C%0Astats%20count%20by%20Computer%20SourceImage%20TargetImage%20GrantedAccess%20%7C%0Atable%20Computer%20SourceImage%20TargetImage%20count%20Flags&duration=PT1H">Remote Process Access</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90010">LINK</a></td></tr>
<tr><td>11</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D11%20Computer%20Image%20TargetFilename%20CreationUtcTime%20%7C%0Atable%20TIMESTAMP%20Computer%20Image%20TargetFilename%20CreationUtcTime&duration=PT1H">File Created</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90011">LINK</a></td></tr>
<tr><td>12</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D12%20Computer%20EventType%20Image%20TargetObject%20%7C%0Atable%20TIMESTAMP%20Computer%20Image%20EventType%20TargetObject&duration=PT1H">Registry Object Create or Delete</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90012">LINK</a></td></tr>
<tr><td>13</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D13%20Computer%20EventType%20Image%20TargetObject%20%7C%0Atable%20TIMESTAMP%20Computer%20Image%20EventType%20TargetObject&duration=PT1H">Registry Value Set</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90013">LINK</a></td></tr>
<tr><td>14</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D14%20Computer%20EventType%20Image%20TargetObject%20NewName%20%7C%0Atable%20TIMESTAMP%20Computer%20Image%20EventType%20TargetObject%20NewName&duration=PT1H">Registry Key and Value Rename</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90014">LINK</a></td></tr>
<tr><td>15</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D15%20Computer%20Image%20TargetFilename%20%7C%0Atable%20TIMESTAMP%20Computer%20Image%20TargetFilename&duration=PT1H">File Create Stream Hash</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90015">LINK</a></td></tr>
<tr><td>16</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D16%20Computer%20Configuration%20%7C%0Atable%20TIMESTAMP%20Computer%20Configuration&duration=PT1H">Sysmon Configuration State Change</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90016">LINK</a></td></tr>
<tr><td>17</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D17%20Computer%20EventType%20PipeName%20Image%20%7C%20table%20TIMESTAMP%20Computer%20EventType%20PipeName%20Image&duration=PT1H">Pipe Created</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90017">LINK</a></td></tr>
<tr><td>18</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D18%20Computer%20EventType%20PipeName%20Image%20%7C%0Atable%20TIMESTAMP%20Computer%20EventType%20PipeName%20Image&duration=PT1H">Pipe Connected</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90018">LINK</a></td></tr>
<tr><td>19</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D19%20Computer%20User%20EventNamespace%20Name%20Query%20%7C%0Atable%20Computer%20User%20Name%20EventNamespace%20Query">WMI Event Filter Activity</a></td><td><a href="">LINK</a></td></tr>
<tr><td>20</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D20%20Computer%20User%20Name%20Type%20Operation%20Destination%20%7C%0Atable%20TIMESTAMP%20Computer%20User%20Name%20Type%20Operation%20Destination&duration=PT1H">WMI Event Consumer Activity</a></td><td><a href="">LINK</a></td></tr>
<tr><td>21</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D21%20Computer%20User%20Operation%20Consumer%20Filter%20%7C%0Atable%20TIMESTAMP%20Computer%20User%20Operation%20Consumer%20Filter&duration=PT1H">WMI Event Consumer To Filter Activity</a></td><td><a href="https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90021">LINK</a></td></tr>
<tr><td>22</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D22%20Computer%20Image%20QueryName%20QueryStatus%20QueryResults%20%7C%0Alookup%20-r%20windows_error_codes%20QueryStatus%20hex%20name%20%7C%0Atable%20TIMESTAMP%20Computer%20QueryName%20name%20QueryResults%20Image&duration=PT1H">DNS Event</a></td><td><a href="https://www.gravwell.io/blog/windows-dns-threat-hunting-with-sysmon-and-gravwell">LINK</a></td></tr>
<tr><td>23</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D23%20Computer%20User%20Image%20TargetFilename%20IsExecutable%20Archived%20%7C%20table%20TIMESTAMP%20Computer%20User%20Image%20TargetFilename%20IsExecutable%20Archived&duration=PT1H">File Delete</a></td><td><a href="https://isc.sans.edu/forums/diary/Sysmon+and+File+Deletion/26084/">LINK</a></td></tr>
<tr><td>255</td><td><a href="/#/search/launch?query=tag%3D%24SYSMON%20winlog%20Provider%3D%3D%22Microsoft-Windows-Sysmon%22%20Channel%3D%3D%22Microsoft-Windows-Sysmon/Operational%22%20EventID%3D%3D255%20Computer%20ID%20Description%20%7C%0Atable%20TIMESTAMP%20Computer%20ID%20Description&duration=PT1H">Error</a></td><td><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon#event-id-255-error">LINK</a></td></tr>
</table>

## Process Events

A valuable function of the Sysmon toolkit is the ability to monitor Process activity on a system.  This includes process creation, termination, remote thread activity, driver loading, process memory access, and even process tampering.  Sysmon process events can be extremely chatty, but there is some very high value data there.

If you need to limit the types of events ingested due to a large number of machines, we recommend tracking process tampering and driver load events at a minimum.  The process access and remote thread can be valuable to detect when malicious processes are attempting to inject code into other processes, but they can be slightly more chatty.

The process creation and termination events can be extremely high volume but can be invaluable in identifying rare applications across an enterprise or identifying disallowed applications on corporate systems.  The process creation event also includes some trust and signing information which can be used to look for unsigned application launches or low trust applications.

However, be warned that process events can be extremely chatty, especially if users commonly use scripts to invoke sub-processes to do tasks.  Most good Sysmon configurations heavily filter the Process stream.

### Creation - EventID 1

The Sysmon process creation event is emitted every time a process is started, we get a few very handy fields such as the image path, process id, parent process, parent image path, file hashes, and even metadata like description, company, and application signing info.  The *EventData* fields can provide significant metadata about about processes as they start up.

Here are a few great Process Creation queries:

#### Total Process Creation Chart
Simple chart showing process creation rate system wide

```tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==1 | stats count | chart count```

#### Total Process Creation by Computer

```tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==1 Computer | stats count by Computer | chart count by Computer limit 64```

![SYSMON CHART](/api/files/67c215e7-1b00-4300-91c7-23b387c19f25 =1956x1799)

#### Table of Process Creation as Fraction of Total

Table of process creation activity for each computer sorted by percentage of the whole.  This query is very useful if you have a fleet of desktops, as it can make abnormal user activity really stand out.

```
@count{tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==1 | stats count as total};
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==1 Computer |
   stats count by Computer |
   enrich -r @count total |
   eval setEnum("share", (toFloat(count)/toFloat(total))*100.0) |
   sort by share desc |
   table Computer count share
```

### Termination - EventID 5

The process termination event can be useful for evaluating process exits, by itself it is not terribly useful.  We don't get exit codes or error states, but when combined with the process creation events we can track the entire process life cycle.  For example we can combine the process start and stop events to create a table of processes with short execution times:

```
@termination{tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==5 ProcessGuid | table ProcessGuid TIMESTAMP};
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==1 Computer User IntegrityLevel OriginalFileName ProcessGuid CurrentDirectory ParentImage |
lookup -r @termination ProcessGuid ProcessGuid TIMESTAMP as endts |
diff endts TIMESTAMP as uptime | eval uptime < toDuration("10s") |
sort by uptime asc |
table Computer User OriginalFileName CurrentDirectory IntegrityLevel ParentImage uptime
```

### Driver Load - EventID 6

Driver load events are especially important to track, while modern code signing has significantly reduced the kernel attack surface there are still plenty of well documented kernel mode root kits that made it through.  Whether by stealing signing keys or tricking users into disabling code signing.  Either way, you should closely monitor drivers that are loaded into critical systems.

Some specific items to look for are:

1. All driver loads

```tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==6 Computer ImageLoaded Hashes Signed Signature SignatureStatus | kv -e Hashes -sep "=" -d "," SHA256 | stats count as LoadCount by Computer ImageLoaded SHA256 | table Computer Signed Signature SignatureStatus LoadCount ImageLoaded SHA256```

2. Drivers loaded with invalid signatures

```tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==6 Computer ImageLoaded Hashes Signed SignatureStatus!="Valid" Signature | kv -e Hashes -sep "=" -d "," SHA256 | table TIMESTAMP Computer Signature SignatureStatus Signed ImageLoaded SHA256```

3. Completely unsigned drivers loaded

```tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==6 Computer ImageLoaded Hashes Signed!=true SignatureStatus Signature | kv -e Hashes -sep "=" -d "," SHA256 | table TIMESTAMP Computer Signature SignatureStatus Signed ImageLoaded SHA256```

### Remote Thread Creation - EventID 8

In the Windows ecosystem it is not uncommon for a one process to create a thread in another process.  However, this is also a common method used by malware to hide its tracks, fire up a thread in another process and load a library with malicious functionality, that way when you look at the process list everything looks normal.  This is also a common technique used in anti-cheat software in games too, so you will see some noise.


```tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==8 Computer SourceImage TargetImage StartModule StartFunction | stats count by SourceImage TargetImage StartModule StartFunction | table Computer SourceImage TargetImage StartModule StartFunction count```


### Access - EventID 10

Cross process access is also common in Windows, this event is emitted any time one process opens up the address space of another.  There can be some value in routinely monitoring process access, especially if you see non-native processes attempting to access the address space of critical processes like *lsass.exe*.  For example, the [Mimikatz](https://github.com/gentilkiwi/mimikatz) toolkit uses this methodology to sniff credentials.  Here is a query that will show events where a process outside of the *SYSTEM32* directory got access to the virtual memory of another process.


```tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==10 Computer SourceImage!~system32 TargetImage~system32 GrantedAccess |
anko windows_access_flags GrantedAccess has VM_READ |
anko windows_access_flags GrantedAccess dump Flags |
stats count by Computer SourceImage TargetImage GrantedAccess |
table Computer SourceImage TargetImage count Flags```

### Process Tampering - EventID 25

Process tampering is a reasonably sophisticated event that indicates that sysmon saw some abnormal activity in how a process was started.  Unfortunately any application that uses a zygote style execution method will be extremely chatty, as it looks like a process is no longer tied to its underlying image.  The Google Chrome browser emits this pretty much every time a user opens a tab.

A good query here is to look for everything where the *Type* of tampering is not "Image is replaced":

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==25 Image Type!="Image is replaced" Computer |
table TIMESTAMP Image Type
```

You may still see significant of activity with a type of *Image is locked for access* which is pretty common for auto-update systems, if so slap the query snippet **eval Type != "Image is locked for access"** before the table renderer.

## DNS Events - EventID 22

DNS logging within Windows has always been a pain point, the Microsoft DNS servers have never provided great [DNS logging](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn800669(v=ws.11)) capabilities.  Sysmon changes all of that by providing robust DNS events that go above and beyond simple request response information.  Sysmon DNS events include the following Data items:

- RuleName
- UtcTime
- ProcessGuid
- ProcessId
- QueryName
- QueryStatus
- QueryResults
- Image

The *QueryName*, *QueryStatus* and *QueryResult* items describe the DNS name that was requested, the resulting status code requested, and the returned data.  The DNS protocol is pretty complex and it allows for all sorts of returned results (up to and including other DNS names), Sysmon encodes DNS query results as a list.  For example, here is the resulting *QueryResults* data for the name *cdn.speedcurve.com*: *type: 5 a3.shared.global.fastly.net;151.101.2.217;151.101.66.217;151.101.130.217;151.101.194.217;*.

The results contain several IP addresses (these were complete resolutions) as well as a referral to another domain name.  We can split out these responses into independent entries using the [split](https://docs.gravwell.io/#!search/split/split.md) module.  Here is an example query that shows a table of every successful DNS request and the resulting entries (we exclude returned values that are not complete resolutions):

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==22 Computer Image QueryName QueryStatus==0 QueryResults |
split -d ; QueryResults |
grep -v -e QueryResults type |
eval QueryResults != "" |
table QueryName Computer Image QueryResults
```

There are many very useful analytics using DNS data, including DNS beacon detection, DNS exfil detection, etc.

## File Events

Sysmon File events can be some of the most chatty event types; processes tend to touch files frequently and if left wide open the number of file events from a single box would be rather unwieldy.  Thankfully the Sysmon configuration system can dramatically decrease the "noise" of Sysmon file events and focus in on things that might require some more attention.  The  [SwiftOnSecurity](https://github.com/SwiftOnSecurity/sysmon-config) configuration does a good job at ignoring some common activity.  For example, it ignores file activity by installers, Microsoft OneDrive, and any update, setup, or installer activity.

The following EventID values represent File Events:

- 2 - File Creation Time Changed
- 9 - Raw Access Read
- 11 - File Create
- 15 - File Create Stream Hash
- 17 - Pipe Create
- 18 - Pipe Connect
- 23 - File Delete

All of the file events will provide the *Image* data item which specifies the application binary which performed the file event. Pipe events (17 and 18) will contain a *PipeName* data item and file events (2, 11, 23)  will have a *TargetFilename*, while Raw Access Read (9) will have a *Device* data item.

A File Delete event worth checking on is any delete activity in the Windows log directory, this might be malware trying to cover its tracks:

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==23 Computer Image TargetFilename~"C:\Windows\System32\winevt\Logs" | table Computer Image TargetFilename TIMESTAMP
```

Raw access to disks should also be very rare.  There are really only two good reasons for reading from raw devices: backups and benchmarks.  Anything else is probably something worth looking into.  Here is a query that looks for raw read access to disk volumes:

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==9 Computer Image Device | table Computer Device Image TIMESTAMP
```

## Registry Events 

The Windows registry is far and away one of the most difficult items to [grok](https://en.wikipedia.org/wiki/Grok) in the world of Windows.  It is big, it is convoluted, it is always changing.  Sysmon registry events come in the form of Value Create and/Or Delete (EventID 12), Value Set (EventID 13), and Value rename (EventID 14).  There are an absolute truck load of things in the registry that really should be monitored, but we will keep it pretty simple and look at some of the heavy hitter security indicators.

### Autorun - Automatically Starting An Application

There are quite a few registry keys and methodologies that can be used to register applications for [automatic start](https://attack.mitre.org/techniques/T1547/001/) using the registry.  Here is a query that hits the basics, we are looking for any registry Set Value event that triggers the rule "Registry Run Keys":

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==13 Image Computer RuleName~"Registry Run Keys" Details TargetObject |
words Registry Run Keys |
table Computer Image Details TargetObject TIMESTAMP
```

### Environment Variables - Trojan Import Paths

Another common technique for establishing persistence is to trick an application into loading the wrong DLL.  This can be accomplished a few ways, you could copy your DLL into a location that will be looked up early, or you can adjust the *Environment* registry key so that a path you control is examined first when the system is looking for DLLs.  There is a lot of nuance to this form of persistence, but any modification to the system wide environment variables deserves attention:

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID == 13 Image Computer TargetObject~"HKLM\System\CurrentControlSet\Control\Session Manager\Environment" Details |
table Computer Image TargetObject Details TIMESTAMP
```

### Microphone Access - Getting Weird With It

A less useful but fun example of registry monitoring fun is to look for registry activity that indicates microphone access.  Here we can look at microphone access start and stop events in the registry to provide a table of total microphone access time per computer:

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==13 TargetObject RuleName~"Audio Capture" Computer TimeCreated Details |
sort by time asc |
regex -e Details "\((?P<qword>.+)\)" qword != "0x00000000-0x00000000" |
regex -e TargetObject "#(?P<appname>[^#]+)\\LastUsedTime(?P<mic_action>\S+)" |
diff TIMESTAMP by Computer appname |
eval mic_action=="Stop" |
stats count as Count sum(diff) as TotalTime by Computer appname |
table Computer TotalTime Count
```

![](/api/files/261b4a66-95d8-4725-9b2e-2c367e287bc5 =1339x281)

## Configuration Events

One of the last Sysmon events that should be closely monitored is EventID 16, this event is emitted whenever the sysmon service configuration is changed.  This event cannot be filtered and should only occur when the Sysmon configuration is actually changed.  This event should really only occur when you are setting up Sysmon or altering the configuration, if it occurs unexpectedly it's time to do some digging.

```
tag=$SYSMON winlog Provider=="Microsoft-Windows-Sysmon" EventID==16 Computer Configuration ConfigurationFileHash |
regex -e ConfigurationFileHash "SHA256=(?P<SHA256>.+)" |
table Computer Configuration SHA256 TIMESTAMP
```
